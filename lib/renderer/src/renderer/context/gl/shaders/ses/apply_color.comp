#version 450 core
#include "include/helper.glsl"

#ifndef LOCAL_SIZE_X
	#define LOCAL_SIZE_X 1
#endif
#ifndef LOCAL_SIZE_Y
	#define LOCAL_SIZE_Y 1
#endif
#ifndef LOCAL_SIZE_Z
	#define LOCAL_SIZE_Z 1
#endif
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

// Uniforms.
uniform uint uSize;

// Data struct.
struct Range
{
	uint first;
	uint count;
};

// SSBO.
layout (std140, binding = 0) readonly buffer Colors
{
	vec4[] colors;
};

layout (std430, binding = 1) readonly buffer Indices
{
	uint[] indices;
};

layout (std140, binding = 2) readonly buffer AtomColors
{
	vec4[] atomColors;
};

layout (std430, binding = 3) readonly buffer AtomsToTriangles
{
	Range[] atomsToTriangles;
};

layout (std430, binding = 4) buffer Counters
{
	uint[] counters;
};

layout (std140, binding = 5) buffer ColorsUint
{
	uvec4[] colorsUint;
};

void main()
{
	uint hash = globalInvocationHash( gl_GlobalInvocationID, gl_NumWorkGroups, gl_WorkGroupSize );

	if( hash >= uSize )
	{
		return;
	}

	for ( uint i = 0; i < atomsToTriangles[ hash ].count; ++i )
	{
		atomicAdd( colorsUint[ indices[ atomsToTriangles[ hash ].first + i ] ].x, uint( atomColors[ hash ].x * 255 ) );
		atomicAdd( colorsUint[ indices[ atomsToTriangles[ hash ].first + i ] ].y, uint( atomColors[ hash ].y * 255 ) );
		atomicAdd( colorsUint[ indices[ atomsToTriangles[ hash ].first + i ] ].z, uint( atomColors[ hash ].z * 255 ) );

		atomicAdd( counters[ indices[ atomsToTriangles[ hash ].first + i ] ], 1 );
	}
}