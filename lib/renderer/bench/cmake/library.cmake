
set(SOURCES "")
set(VENDORS "")
file(GLOB_RECURSE SOURCES "${CMAKE_CURRENT_LIST_DIR}/../src/*")
file(GLOB_RECURSE VENDORS ./vendor/*)
message("VTX bench - VENDORS : <${VENDORS}>")
add_executable(vtx_renderer_bench ${SOURCES} ${VENDORS})
configure_target(vtx_renderer_bench)

if(NOT DEFINED _VTX_RENDERER_BENCH_CONAN)
	target_include_directories(vtx_renderer_bench PRIVATE vendor)

	target_link_libraries(vtx_renderer_bench PUBLIC vtx_util)
	target_link_libraries(vtx_renderer_bench PUBLIC vtx_renderer)
	target_link_libraries(vtx_renderer_bench PUBLIC vtx_core)
	target_link_libraries(vtx_renderer_bench PUBLIC vtx_io)
	target_link_libraries(vtx_renderer_bench PUBLIC SDL2::SDL2-static)
	target_link_libraries(vtx_renderer_bench PUBLIC SDL2::SDL2main)
	target_link_libraries(vtx_renderer_bench PUBLIC imgui::imgui)
	target_link_libraries(vtx_renderer_bench PUBLIC stb::stb)
	#target_link_libraries(vtx_renderer_bench PRIVATE assimp::assimp)
else()
	target_include_directories(vtx_renderer_bench PRIVATE vendor)

	target_link_libraries(vtx_renderer_bench PRIVATE vtx_util::vtx_util)
	target_link_libraries(vtx_renderer_bench PRIVATE vtx_renderer::vtx_renderer)
	target_link_libraries(vtx_renderer_bench PRIVATE vtx_core::vtx_core)
	target_link_libraries(vtx_renderer_bench PRIVATE vtx_io::vtx_io)
	target_link_libraries(vtx_renderer_bench PRIVATE SDL2::SDL2-static)
	target_link_libraries(vtx_renderer_bench PRIVATE SDL2::SDL2main)
	target_link_libraries(vtx_renderer_bench PRIVATE imgui::imgui)
	target_link_libraries(vtx_renderer_bench PRIVATE stb::stb)
	#target_link_libraries(vtx_renderer_bench PRIVATE assimp::assimp)
endif()

