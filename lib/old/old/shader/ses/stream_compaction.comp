#version 450
#include "include/helper.glsl"

#ifndef LOCAL_SIZE_X
	#define LOCAL_SIZE_X 1
#endif
#ifndef LOCAL_SIZE_Y
	#define LOCAL_SIZE_Y 1
#endif
#ifndef LOCAL_SIZE_Z
	#define LOCAL_SIZE_Z 1
#endif
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

// Uniforms.
uniform uint uSize;
uniform uint uSizeReduced;

// SSBO.
layout (std140, binding = 0) writeonly buffer TrianglePositions
{
	vec4[] trianglePositions;
};

layout (std140, binding = 1) writeonly buffer TriangleNormals
{
	vec4[] triangleNormals;
};

layout (std430, binding = 2) writeonly buffer TriangleIndices
{
	uint[] triangleIndices;
};

layout (std140, binding = 3) writeonly buffer TriangleColors
{
	vec4[] triangleColors;
};

layout (std430, binding = 4) writeonly buffer TriangleVisibilities
{
	uint[] triangleVisibilities;
};

layout (std430, binding = 5) writeonly buffer TriangleAtomIds
{
	uint[] triangleAtomIds;
};

layout (std140, binding = 6) readonly buffer TrianglePositionsTmp
{
	vec4[] trianglePositionsTmp;
};

layout (std140, binding = 7) readonly buffer TriangleNormalsTmp
{
	vec4[] triangleNormalsTmp;
};

layout (std430, binding = 8) readonly buffer TriangleAtomIndicesTmp
{
	uint[] triangleAtomIndicesTmp;
};

layout (std430, binding = 9) readonly buffer TriangleValidities
{
	uint[] triangleValidities;
};

layout (std430, binding = 10) readonly buffer TriangleValiditiesSum
{
	uint[] triangleValiditiesSum;
};

layout (std140, binding = 11) readonly buffer AtomColors
{
	vec4[] atomColors;
};

layout (std430, binding = 12) readonly buffer AtomVisibilities
{
	uint[] atomVisibilities;
};

layout (std430, binding = 13) readonly buffer AtomIds
{
	uint[] atomIds;
};

void main()
{
	const uint index = globalInvocationHash( gl_GlobalInvocationID, gl_NumWorkGroups, gl_WorkGroupSize );
	
	if( index > uSize )
	{
		return;
	}
	
	if( triangleValidities[ index ] == 0 )
	{
		return;
	}

	const uint indexNew = triangleValiditiesSum[ index ];

	/*
	if( indexNew > uSizeReduced )
	{
		return;
	}
	*/
	
	trianglePositions[ indexNew ] = trianglePositionsTmp[ index ];
	triangleNormals[ indexNew ] = triangleNormalsTmp[ index ];	
	triangleIndices[ indexNew ] = indexNew;
	triangleColors[ indexNew ] = atomColors[ triangleAtomIndicesTmp[ index ] ];
	triangleVisibilities[ indexNew ] = atomVisibilities[ triangleAtomIndicesTmp[ index ] ];
	triangleAtomIds[ indexNew ] = atomIds[ triangleAtomIndicesTmp[ index ] ];
}