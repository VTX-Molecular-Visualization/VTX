#version 450
#include "include/struct.glsl"
#include "include/helper.glsl"
#include "include/grid.glsl"

#ifndef LOCAL_SIZE_X
	#define LOCAL_SIZE_X 1
#endif
#ifndef LOCAL_SIZE_Y
	#define LOCAL_SIZE_Y 1
#endif
#ifndef LOCAL_SIZE_Z
	#define LOCAL_SIZE_Z 1
#endif
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

const uint[ 12 ][ 2 ] _EDGE_TO_VERTICES
				= { { 0, 1 }, { 1, 2 }, { 2, 3 }, { 0, 3 }, { 4, 5 }, { 5, 6 },
					{ 6, 7 }, { 4, 7 }, { 0, 4 }, { 1, 5 }, { 2, 6 }, { 3, 7 } };
					
const uint[ 256 ] _EDGE_TABLE
	= { 0x0,   0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03,
		0xe09, 0xf00, 0x190, 0x99,	0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96,
		0xd9a, 0xc93, 0xf99, 0xe90, 0x230, 0x339, 0x33,	 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35,
		0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, 0x3a0, 0x2a9, 0x1a3, 0xaa,  0x7a6, 0x6af, 0x5a5, 0x4ac,
		0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, 0x460, 0x569, 0x663, 0x76a, 0x66,  0x16f,
		0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, 0x5f0, 0x4f9, 0x7f3, 0x6fa,
		0x1f6, 0xff,  0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 0x650, 0x759,
		0x453, 0x55a, 0x256, 0x35f, 0x55,  0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
		0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,	0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3,
		0x9c9, 0x8c0, 0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc,	 0x1c5, 0x2cf, 0x3c6,
		0x4ca, 0x5c3, 0x6c9, 0x7c0, 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55,
		0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, 0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
		0x2fc, 0x3f5, 0xff,	 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f,
		0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66,  0x76a, 0x663, 0x569, 0x460, 0xca0, 0xda9, 0xea3, 0xfaa,
		0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa,  0x1a3, 0x2a9, 0x3a0, 0xd30, 0xc39,
		0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33,	0x339, 0x230,
		0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393,
		0x99,  0x190, 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406,
		0x30a, 0x203, 0x109, 0x0 };

// Uniforms.
uniform vec3	uGridSESWorldOrigin;
uniform uvec3	uGridSESSize;
uniform vec3	uGridSESCellSize;
uniform float	uIsovalue;

// SSBO.
layout (std430, binding = 0) readonly buffer SESGridData
{
	SESGridDataStruct[] sesGridData;
};

layout (std140, binding = 1) writeonly buffer TrianglePositions
{
	vec4[] trianglePositions;
};

layout (std140, binding = 2) writeonly buffer TriangleNormals
{
	vec4[] triangleNormals;
};

layout (std430, binding = 3) writeonly buffer TriangleAtomIndices
{
	uint[] triangleAtomIndices;
};

layout (std430, binding = 4) writeonly buffer TriangleValidities
{
	uint[] triangleValidities;
};

layout (std430, binding = 5) readonly buffer TriangleTable
{
	int[] triangleTable;
};

// Marching cube.
void main()
{
	// Get corresponding ses grid data.
	const uint sesGridHash = globalInvocationHash( gl_GlobalInvocationID, gl_NumWorkGroups, gl_WorkGroupSize );
	const uvec3 sesGridPosition = gridPosition( sesGridHash, uGridSESSize);
	
	// Not in grid.
	if (	sesGridPosition.x >= uGridSESSize.x ||
			sesGridPosition.y >= uGridSESSize.y ||
			sesGridPosition.z >= uGridSESSize.z )
	{
		return;
	}
	
	// Create cell with neightbors.
	const uvec3[ 8 ] voxelGridPositions = {
		sesGridPosition,
		sesGridPosition + uvec3( 1, 0, 0 ),
		sesGridPosition + uvec3( 1, 0, 1 ),
		sesGridPosition + uvec3( 0, 0, 1 ),
		sesGridPosition + uvec3( 0, 1, 0 ),
		sesGridPosition + uvec3( 1, 1, 0 ),
		sesGridPosition + uvec3( 1, 1, 1 ),
		sesGridPosition + uvec3( 0, 1, 1 )
	};
	
	uint[ 8 ]	voxelHash;	
	float[ 8 ]	voxelSDF;
	vec3[ 8	]	voxelWorldPosition;
	
	for( uint i = 0 ; i < 8; ++i )
	{
		voxelHash[ i ] = gridHash( voxelGridPositions[ i ], uGridSESSize );
		voxelSDF[ i ] = sesGridData[ voxelHash[ i ] ].sdf;
		voxelWorldPosition[ i ] = worldPosition( voxelGridPositions[ i ], uGridSESWorldOrigin, uGridSESCellSize);
	}

	// Compute cube index.
	uint cubeIndex = 0;
	for ( uint i = 0; i < 8; ++i )
	{
		if ( voxelSDF[ i ] < uIsovalue )
		{
			cubeIndex |= ( 1 << i );
		}
	}

	// Get intersections.
	vec3[ 12 ] intersections;
	uint intersectionsKey = _EDGE_TABLE[ cubeIndex ];

	uint idx = 0;
	while ( intersectionsKey != 0)
	{
		if ( bool( intersectionsKey & 1 ) )
		{
			const uint	v1 = _EDGE_TO_VERTICES[ idx ][ 0 ];
			const uint	v2 = _EDGE_TO_VERTICES[ idx ][ 1 ];			
			
			const float mu = ( uIsovalue - voxelSDF[ v1 ] ) / ( voxelSDF[ v2 ] - voxelSDF[ v1 ] );

			intersections[ idx ].x = mu * ( voxelWorldPosition[ v2 ].x - voxelWorldPosition[ v1 ].x ) + voxelWorldPosition[ v1 ].x;
			intersections[ idx ].y = mu * ( voxelWorldPosition[ v2 ].y - voxelWorldPosition[ v1 ].y ) + voxelWorldPosition[ v1 ].y;
			intersections[ idx ].z = mu * ( voxelWorldPosition[ v2 ].z - voxelWorldPosition[ v1 ].z ) + voxelWorldPosition[ v1 ].z;
		}
		idx++;
		intersectionsKey >>= 1;
	}

	// Get triangles.
	for ( uint i = 0; triangleTable[ cubeIndex * 16 + i ] != -1; i += 3 )
	{
		for ( uint j = 0; j < 3; ++j )
		{
			const vec3 vertice = intersections[ triangleTable[ cubeIndex * 16 + i + j ] ];		

			// Position.
			trianglePositions[ sesGridHash * 15 + i + j ] = vec4( vertice, 1.f );		

			// Debug.
			//debug[ sesGridHash * 15 + i + j ] = vec4( vertice, 1.f );	
			
			// Validity (used for compaction in the next pass).
			triangleValidities[ sesGridHash * 15 + i + j ] = 1;
		}
		
		
		const vec4 normal = vec4(
			normalize( 
				cross(	intersections[ triangleTable[ cubeIndex * 16 + i + 1 ] ] - intersections[ triangleTable[ cubeIndex * 16 + i ] ],
						intersections[ triangleTable[ cubeIndex * 16 + i + 2 ] ] - intersections[ triangleTable[ cubeIndex * 16 + i ] ] ) )
						, 1.f );
		
		for ( uint j = 0; j < 3; ++j )
		{
			triangleNormals[ sesGridHash * 15 + i + j ] = normal;
			triangleAtomIndices[ sesGridHash * 15 + i + j ] = sesGridData[ sesGridHash ].nearestAtom;
		}
	}
}